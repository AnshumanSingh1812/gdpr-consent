You will need the adb tool from the Android SDK.

First off, download the latest frida-server for Android from our releases page and uncompress it using decompression tools, like 7-zip.

Next, install the frida tools in order to run the commands:

$ pip install frida-tools

Now, let’s get it running on your device:

$ adb root # might be required
$ adb push frida-server-16.0.19-android-x86 /data/local/tmp/
$ adb shell "chmod 755 /data/local/tmp/frida-server-16.0.19-android-x86"
$ adb shell "/data/local/tmp/frida-server-16.0.19-android-x86 &"

If the error "Unable to start: Error binding to address 127.0.0.1:27042: Address already in use" is encountered, modify the command to use a different port and address combination.
$ adb shell "/data/local/tmp/frida-server-16.0.19-android-x86 -l 127.0.0.1:27043 &"

For the last step, make sure you start frida-server as root, i.e. if you are doing this on a rooted device, you might need to su and run it from that shell.

adb on a production build
If you get adbd cannot run as root in production builds after running adb root
you need to prefix each shell command with su -c. For example: adb shell "su -c chmod 755 /data/local/tmp/frida-server"

Next, make sure adb can see your device:

$ adb devices -l
This will also ensure that the adb daemon is running on your desktop, which allows Frida to discover and communicate with your device regardless of whether you’ve got it hooked up through USB or WiFi.

Now, on your desktop it’s time to make sure the basics are working. Run:

$ frida-ps -U
This should give you a process list along the lines of:

  PID NAME
 1590 com.facebook.katana
13194 com.facebook.katana:providers
12326 com.facebook.orca
13282 com.twitter.android
…
Great, we’re good to go then!

Tracing open() calls in Chrome
Alright, let’s have some fun. Fire up the Chrome app on your device and return to your desktop and run:

$ frida-trace -U -i open com.android.chrome
Uploading data...
open: Auto-generated handler …/linker/open.js
open: Auto-generated handler …/libc.so/open.js
Started tracing 2 functions. Press Ctrl+C to stop.
Now just play around with the Chrome app and you should start seeing open() calls flying in:

1392 ms	open()
1403 ms	open()
1420 ms	open()
You can now live-edit the aforementioned JavaScript files as you read man open, and start diving deeper and deeper into your Android apps.